# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
- group: production
- name: npm_config_cache
  value: $(Pipeline.Workspace)/.npm
- name: azureSubscription
  value: 'Azure for Students(66144f75-7a2e-4bf5-a595-3c50340d2c18)'
- name: appName
  value: 'odysseat'
- name: dockerRegistryServiceConnection
  value: '6379d5f6-0d87-46f7-938c-85dc63546e12'
- name: imageRepository
  value: 'odysseat'
- name: containerRegistry
  value: 'odysseat.azurecr.io'
- name: dockerfilePath
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: tag
  value: '$(Build.BuildId)'
- name: vmImageName
  value: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Test stage
  jobs:
    - job: Test
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '24.x'
        displayName: 'Install Node.js'
      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)
        displayName: Cache npm
      - script: |
          npm ci
          npm run test -- --run --reporter=default --reporter=junit --outputFile=reports/junit.xml
        displayName: 'npm install and test'
        env:
          SKIP_ENV_VALIDATION: true
      - task: PublishTestResults@2
        displayName: 'supply npm test results to pipelines'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'reports/junit.xml'
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Cache@2
      displayName: Cache Docker
      inputs:
        key: 'docker1 | "$(Agent.OS)" | $(imageRepository) | $(dockerfilePath)'
        path: $(Pipeline.Workspace)/docker_image_cache
        restoreKeys: |
          docker1 | "$(Agent.OS)" | $(imageRepository)
    - script: |
        docker buildx create --name builder --driver docker-container --use
        docker buildx build \
          --tag $(containerRegistry)/$(imageRepository):$(tag) \
          --tag $(containerRegistry)/$(imageRepository):latest \
          --tag registry.fly.io/$(imageRepository):$(tag) \
          --tag registry.fly.io/$(imageRepository):latest \
          --cache-from=type=local,src=$(Pipeline.Workspace)/docker_image_cache \
          --cache-to=type=local,dest=$(Pipeline.Workspace)/docker_image_cache,mode=max \
          --file $(dockerfilePath) \
          --output=type=docker \
          .
      displayName: Build docker image
      env:
        DOCKER_BUILDKIT: 1
    - task: Docker@2
      displayName: Push docker image to Azure
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
          $(tag)
    - script: |
        curl -L https://fly.io/install.sh | sh
        /home/vsts/.fly/bin/flyctl auth docker
        docker push registry.fly.io/$(imageRepository):$(tag)
        docker push registry.fly.io/$(imageRepository):latest
      displayName: Push docker image to Fly.io
      env:
        FLY_API_TOKEN: $(FLY_API_TOKEN)
- stage: Deploy
  displayName: Deploy stage
  jobs:
  - job: Deploy
    displayName: Deploy
    steps:
    - task: AzureWebAppContainer@1
      displayName: Deploy to Azure
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: $(containerRegistry)/$(imageRepository):$(tag)
        appSettings: -AUTH_SECRET $(AUTH_SECRET) -DATABASE_URL $(DATABASE_URL) -NEXT_PUBLIC_MAP_STYLE $(NEXT_PUBLIC_MAP_STYLE) -AWS_BUCKET $(AWS_BUCKET) -AWS_REGION $(AWS_REGION) -AWS_ENDPOINT_URL $(AWS_ENDPOINT_URL) -AWS_ACCESS_KEY_ID $(AWS_ACCESS_KEY_ID) -AWS_SECRET_ACCESS_KEY $(AWS_SECRET_ACCESS_KEY) -RESEND_API_KEY $(RESEND_API_KEY) -RESEND_DOMAIN $(RESEND_DOMAIN)
    - script: |
        curl -L https://fly.io/install.sh | sh
        /home/vsts/.fly/bin/flyctl secrets set AUTH_SECRET=$(AUTH_SECRET) --stage
        /home/vsts/.fly/bin/flyctl secrets set DATABASE_URL=$(DATABASE_URL) --stage
        /home/vsts/.fly/bin/flyctl secrets set NEXT_PUBLIC_MAP_STYLE=$(NEXT_PUBLIC_MAP_STYLE) --stage
        /home/vsts/.fly/bin/flyctl secrets set AWS_BUCKET=$(AWS_BUCKET) --stage
        /home/vsts/.fly/bin/flyctl secrets set AWS_REGION=$(AWS_REGION) --stage
        /home/vsts/.fly/bin/flyctl secrets set AWS_ENDPOINT_URL=$(AWS_ENDPOINT_URL) --stage
        /home/vsts/.fly/bin/flyctl secrets set AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) --stage
        /home/vsts/.fly/bin/flyctl secrets set AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY) --stage
        /home/vsts/.fly/bin/flyctl secrets set RESEND_API_KEY=$(RESEND_API_KEY) --stage
        /home/vsts/.fly/bin/flyctl secrets set RESEND_DOMAIN=$(RESEND_DOMAIN) --stage
        /home/vsts/.fly/bin/flyctl deploy --detach --image registry.fly.io/$(imageRepository):$(tag)
      displayName: Deploy to Fly
      env:
        FLY_API_TOKEN: $(FLY_API_TOKEN)